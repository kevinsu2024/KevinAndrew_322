define void @main(){
	:entry
	int64 %num_rows_1
	int64 %num_cols_1
	int64 %num_rows_2
	int64 %num_cols_2
	int64 %u_num_rows_1
	int64 %u_num_cols_1
	int64 %u_num_rows_2
	int64 %u_num_cols_2
	int64 %cmp_val
	int64 %cmp_val2
	int64 %row_ctr
	int64 %col_ctr
	int64 %val
	int64[][] %m1
	int64[][] %m2
	int64[][] %ans
	
	%row_ctr <- 0
	%col_ctr <- 0
	%num_rows_1 <- call input ()
	%num_cols_1 <- call input()
	%u_num_rows_1 <- %num_rows_1 >> 1
	%u_num_cols_1 <- %num_cols_1 >> 1
	%m1 <- new Array(%num_rows_1, %num_cols_1)
	call @get_matrix_vals(%m1, %u_num_rows_1, %u_num_cols_1)
	%num_rows_2 <- call input ()
	%num_cols_2 <- call input()
	%u_num_rows_2 <- %num_rows_2 >> 1
	%u_num_cols_2 <- %num_cols_2 >> 1
	%m2 <- new Array(%num_rows_2, %num_cols_2)
	call @get_matrix_vals(%m2, %u_num_rows_2, %u_num_cols_2)
	%ans <- new Array(%num_rows_1, %num_cols_2)
	br :row_loop


	:row_loop
	br :col_loop

	:col_loop
	%val <- call @get_prod(%m1,%m2,%row_ctr,%col_ctr, %u_num_cols_1)
	%ans[%row_ctr][%col_ctr] <- %val
	%col_ctr <- %col_ctr + 1
	%cmp_val <- %col_ctr < %u_num_cols_2
	br %cmp_val :col_loop :update

	:update
	%row_ctr <- %row_ctr + 1
	%col_ctr <- 0
	%cmp_val2 <- %row_ctr < %u_num_rows_1
	br %cmp_val2 :row_loop :end

	:end
	call @print_matrix(%ans)
	return

}

define void @print_matrix(int64[][] %m){
	:entry
	int64 %rows
	int64 %cols
	int64 %crow
	int64 %ccol
	int64 %cmp_val
	int64 %cmp_val2
	int64 %temp
	%rows <- length %m 0
	call print(%rows)
	%rows <- %rows >> 1
	%cols <- length %m 1
	call print(%cols)
	%cols <- %cols >> 1
	%crow <- 0
    %ccol <- 0
	br :row_loop

	:row_loop
	br :col_loop

	:col_loop
	%temp <- %m[%crow][%ccol]
	call print(%temp)
	%ccol <- %ccol + 1
	%cmp_val <- %ccol < %cols
	br %cmp_val :col_loop :continue

	:continue
	%crow <- %crow + 1
	%ccol <- 0
	%cmp_val2 <- %crow < %rows
	br %cmp_val2 :row_loop :end

	:end
	return
	
}

define int64 @get_prod(int64[][] %m1,int64[][] %m2,int64 %r, int64 %c, int64 %num_iter){
	:entry
	int64 %ctr
	%ctr <- 0
	int64 %val
	%val <- 0
	int64  %temp1
	int64 %temp2
	int64 %cmp_val
	
	br :loop

	:loop
	%temp1 <- %m1[%r][%ctr]
	%temp1 <- %temp1 >> 1
	%temp2 <- %m2[%ctr][%c]
	%temp2 <- %temp2 >> 1
	%temp1 <- %temp1 * %temp2
	%val <- %val + %temp1
	%ctr <- %ctr + 1
	%cmp_val <- %ctr < %num_iter
	br %cmp_val :loop :end

	:end
	%val <- %val << 1
	%val <- %val + 1
	return %val

}


define void @get_matrix_vals(int64[][] %m, int64 %rows, int64 %cols){
	:entry
	int64 %crow
	int64 %ccol
	int64 %val
	int64 %cmp_val
	int64 %cmp_val2
	%crow <- 0
	%ccol <- 0
	br :row_loop

	:row_loop
	br :col_loop

	:col_loop
	%val <- call input()
	%m[%crow][%ccol] <- %val
	%ccol <- %ccol + 1
	%cmp_val <- %ccol < %cols
	br %cmp_val :col_loop :continue


	:continue
	%ccol <- 0
	%crow <- %crow + 1
	%cmp_val2 <- %crow < %rows
	br %cmp_val2 :row_loop :end

	:end
	return
}